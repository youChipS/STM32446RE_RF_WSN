ARM GAS  /tmp/ccZMnibY.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	NMI_Handler:
  26              	.LFB135:
  27              		.file 1 "Core/Src/stm32f4xx_it.c"
   1:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f4xx_it.c **** /**
   3:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Core/Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f4xx_it.c ****   * @attention
   8:Core/Src/stm32f4xx_it.c ****   *
   9:Core/Src/stm32f4xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32f4xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f4xx_it.c ****   *
  12:Core/Src/stm32f4xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/stm32f4xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/stm32f4xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/stm32f4xx_it.c ****   *                             www.st.com/SLA0044
  16:Core/Src/stm32f4xx_it.c ****   *
  17:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f4xx_it.c ****   */
  19:Core/Src/stm32f4xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f4xx_it.c **** 
  21:Core/Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f4xx_it.c **** #include "main.h"
  23:Core/Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  24:Core/Src/stm32f4xx_it.c **** #include "FreeRTOS.h"
  25:Core/Src/stm32f4xx_it.c **** #include "task.h"
  26:Core/Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  29:Core/Src/stm32f4xx_it.c **** 
  30:Core/Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
ARM GAS  /tmp/ccZMnibY.s 			page 2


  32:Core/Src/stm32f4xx_it.c **** 
  33:Core/Src/stm32f4xx_it.c **** /* USER CODE END TD */
  34:Core/Src/stm32f4xx_it.c **** 
  35:Core/Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  37:Core/Src/stm32f4xx_it.c **** 
  38:Core/Src/stm32f4xx_it.c **** /* USER CODE END PD */
  39:Core/Src/stm32f4xx_it.c **** 
  40:Core/Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  42:Core/Src/stm32f4xx_it.c **** 
  43:Core/Src/stm32f4xx_it.c **** /* USER CODE END PM */
  44:Core/Src/stm32f4xx_it.c **** 
  45:Core/Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  47:Core/Src/stm32f4xx_it.c **** 
  48:Core/Src/stm32f4xx_it.c **** /* USER CODE END PV */
  49:Core/Src/stm32f4xx_it.c **** 
  50:Core/Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  52:Core/Src/stm32f4xx_it.c **** 
  53:Core/Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  54:Core/Src/stm32f4xx_it.c **** 
  55:Core/Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  56:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  57:Core/Src/stm32f4xx_it.c **** 
  58:Core/Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  59:Core/Src/stm32f4xx_it.c **** 
  60:Core/Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  61:Core/Src/stm32f4xx_it.c **** 
  62:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  63:Core/Src/stm32f4xx_it.c **** 
  64:Core/Src/stm32f4xx_it.c **** /* USER CODE END EV */
  65:Core/Src/stm32f4xx_it.c **** 
  66:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  67:Core/Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  68:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  69:Core/Src/stm32f4xx_it.c **** /**
  70:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  71:Core/Src/stm32f4xx_it.c ****   */
  72:Core/Src/stm32f4xx_it.c **** void NMI_Handler(void)
  73:Core/Src/stm32f4xx_it.c **** {
  28              		.loc 1 73 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  35 0000 FEE7     		b	.L2
  36              		.cfi_endproc
  37              	.LFE135:
  39              		.section	.text.HardFault_Handler,"ax",%progbits
  40              		.align	1
  41              		.global	HardFault_Handler
  42              		.syntax unified
  43              		.thumb
ARM GAS  /tmp/ccZMnibY.s 			page 3


  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	HardFault_Handler:
  48              	.LFB136:
  74:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  75:Core/Src/stm32f4xx_it.c **** 
  76:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  77:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  78:Core/Src/stm32f4xx_it.c ****   while (1)
  79:Core/Src/stm32f4xx_it.c ****   {
  80:Core/Src/stm32f4xx_it.c ****   }
  81:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  82:Core/Src/stm32f4xx_it.c **** }
  83:Core/Src/stm32f4xx_it.c **** 
  84:Core/Src/stm32f4xx_it.c **** /**
  85:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  86:Core/Src/stm32f4xx_it.c ****   */
  87:Core/Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  88:Core/Src/stm32f4xx_it.c **** {
  49              		.loc 1 88 0
  50              		.cfi_startproc
  51              		@ Volatile: function does not return.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.L4:
  56 0000 FEE7     		b	.L4
  57              		.cfi_endproc
  58              	.LFE136:
  60              		.section	.text.MemManage_Handler,"ax",%progbits
  61              		.align	1
  62              		.global	MemManage_Handler
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	MemManage_Handler:
  69              	.LFB137:
  89:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  90:Core/Src/stm32f4xx_it.c **** 
  91:Core/Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  92:Core/Src/stm32f4xx_it.c ****   while (1)
  93:Core/Src/stm32f4xx_it.c ****   {
  94:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  95:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  96:Core/Src/stm32f4xx_it.c ****   }
  97:Core/Src/stm32f4xx_it.c **** }
  98:Core/Src/stm32f4xx_it.c **** 
  99:Core/Src/stm32f4xx_it.c **** /**
 100:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
 101:Core/Src/stm32f4xx_it.c ****   */
 102:Core/Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 103:Core/Src/stm32f4xx_it.c **** {
  70              		.loc 1 103 0
  71              		.cfi_startproc
  72              		@ Volatile: function does not return.
  73              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccZMnibY.s 			page 4


  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76              	.L6:
  77 0000 FEE7     		b	.L6
  78              		.cfi_endproc
  79              	.LFE137:
  81              		.section	.text.BusFault_Handler,"ax",%progbits
  82              		.align	1
  83              		.global	BusFault_Handler
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv4-sp-d16
  89              	BusFault_Handler:
  90              	.LFB138:
 104:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 105:Core/Src/stm32f4xx_it.c **** 
 106:Core/Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 107:Core/Src/stm32f4xx_it.c ****   while (1)
 108:Core/Src/stm32f4xx_it.c ****   {
 109:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 110:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32f4xx_it.c ****   }
 112:Core/Src/stm32f4xx_it.c **** }
 113:Core/Src/stm32f4xx_it.c **** 
 114:Core/Src/stm32f4xx_it.c **** /**
 115:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 116:Core/Src/stm32f4xx_it.c ****   */
 117:Core/Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 118:Core/Src/stm32f4xx_it.c **** {
  91              		.loc 1 118 0
  92              		.cfi_startproc
  93              		@ Volatile: function does not return.
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.L8:
  98 0000 FEE7     		b	.L8
  99              		.cfi_endproc
 100              	.LFE138:
 102              		.section	.text.UsageFault_Handler,"ax",%progbits
 103              		.align	1
 104              		.global	UsageFault_Handler
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	UsageFault_Handler:
 111              	.LFB139:
 119:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 120:Core/Src/stm32f4xx_it.c **** 
 121:Core/Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 122:Core/Src/stm32f4xx_it.c ****   while (1)
 123:Core/Src/stm32f4xx_it.c ****   {
 124:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 125:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 126:Core/Src/stm32f4xx_it.c ****   }
ARM GAS  /tmp/ccZMnibY.s 			page 5


 127:Core/Src/stm32f4xx_it.c **** }
 128:Core/Src/stm32f4xx_it.c **** 
 129:Core/Src/stm32f4xx_it.c **** /**
 130:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 131:Core/Src/stm32f4xx_it.c ****   */
 132:Core/Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 133:Core/Src/stm32f4xx_it.c **** {
 112              		.loc 1 133 0
 113              		.cfi_startproc
 114              		@ Volatile: function does not return.
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.L10:
 119 0000 FEE7     		b	.L10
 120              		.cfi_endproc
 121              	.LFE139:
 123              		.section	.text.DebugMon_Handler,"ax",%progbits
 124              		.align	1
 125              		.global	DebugMon_Handler
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu fpv4-sp-d16
 131              	DebugMon_Handler:
 132              	.LFB140:
 134:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 135:Core/Src/stm32f4xx_it.c **** 
 136:Core/Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 137:Core/Src/stm32f4xx_it.c ****   while (1)
 138:Core/Src/stm32f4xx_it.c ****   {
 139:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 140:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32f4xx_it.c ****   }
 142:Core/Src/stm32f4xx_it.c **** }
 143:Core/Src/stm32f4xx_it.c **** 
 144:Core/Src/stm32f4xx_it.c **** /**
 145:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 146:Core/Src/stm32f4xx_it.c ****   */
 147:Core/Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 148:Core/Src/stm32f4xx_it.c **** {
 133              		.loc 1 148 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138 0000 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE140:
 142              		.section	.text.SysTick_Handler,"ax",%progbits
 143              		.align	1
 144              		.global	SysTick_Handler
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	SysTick_Handler:
ARM GAS  /tmp/ccZMnibY.s 			page 6


 151              	.LFB141:
 149:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 150:Core/Src/stm32f4xx_it.c **** 
 151:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 152:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 153:Core/Src/stm32f4xx_it.c **** 
 154:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 155:Core/Src/stm32f4xx_it.c **** }
 156:Core/Src/stm32f4xx_it.c **** 
 157:Core/Src/stm32f4xx_it.c **** /**
 158:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System tick timer.
 159:Core/Src/stm32f4xx_it.c ****   */
 160:Core/Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 161:Core/Src/stm32f4xx_it.c **** {
 152              		.loc 1 161 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		.loc 1 161 0
 157 0000 08B5     		push	{r3, lr}
 158              	.LCFI0:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 3, -8
 161              		.cfi_offset 14, -4
 162:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 163:Core/Src/stm32f4xx_it.c **** 
 164:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 165:Core/Src/stm32f4xx_it.c ****   HAL_IncTick();
 162              		.loc 1 165 0
 163 0002 FFF7FEFF 		bl	HAL_IncTick
 164              	.LVL0:
 166:Core/Src/stm32f4xx_it.c **** #if (INCLUDE_xTaskGetSchedulerState == 1 )
 167:Core/Src/stm32f4xx_it.c ****   if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 165              		.loc 1 167 0
 166 0006 FFF7FEFF 		bl	xTaskGetSchedulerState
 167              	.LVL1:
 168 000a 0128     		cmp	r0, #1
 169 000c 01D0     		beq	.L12
 168:Core/Src/stm32f4xx_it.c ****   {
 169:Core/Src/stm32f4xx_it.c **** #endif /* INCLUDE_xTaskGetSchedulerState */
 170:Core/Src/stm32f4xx_it.c ****   xPortSysTickHandler();
 170              		.loc 1 170 0
 171 000e FFF7FEFF 		bl	xPortSysTickHandler
 172              	.LVL2:
 173              	.L12:
 174 0012 08BD     		pop	{r3, pc}
 175              		.cfi_endproc
 176              	.LFE141:
 178              		.text
 179              	.Letext0:
 180              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 181              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 182              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 183              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 184              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 185              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 186              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccZMnibY.s 			page 7


 187              		.file 9 "Core/Inc/FreeRTOSConfig.h"
ARM GAS  /tmp/ccZMnibY.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccZMnibY.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccZMnibY.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccZMnibY.s:40     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccZMnibY.s:47     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccZMnibY.s:61     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccZMnibY.s:68     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccZMnibY.s:82     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccZMnibY.s:89     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccZMnibY.s:103    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccZMnibY.s:110    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccZMnibY.s:124    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccZMnibY.s:131    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccZMnibY.s:143    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccZMnibY.s:150    .text.SysTick_Handler:0000000000000000 SysTick_Handler
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
xTaskGetSchedulerState
xPortSysTickHandler
