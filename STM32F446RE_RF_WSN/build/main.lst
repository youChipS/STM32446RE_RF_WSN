ARM GAS  /tmp/ccTBhSsj.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB140:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** #include "string.h"
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  /tmp/ccTBhSsj.s 			page 2


  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart1;
  47:Core/Src/main.c **** UART_HandleTypeDef huart2;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** osThreadId defaultTaskHandle;
  50:Core/Src/main.c **** osThreadId huart1TaskHandle;
  51:Core/Src/main.c **** osThreadId huart2TaskHandle;
  52:Core/Src/main.c **** /* USER CODE BEGIN PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/main.c **** void SystemClock_Config(void);
  58:Core/Src/main.c **** static void MX_GPIO_Init(void);
  59:Core/Src/main.c **** static void MX_I2C1_Init(void);
  60:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  61:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  62:Core/Src/main.c **** void StartDefaultTask(void const * argument);
  63:Core/Src/main.c **** void StartHuart1RxTask(void const * argument);
  64:Core/Src/main.c **** void StartHuart2RxTask(void const * argument);
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* USER CODE END PFP */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  71:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* USER CODE END 0 */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /**
  76:Core/Src/main.c ****   * @brief  The application entry point.
  77:Core/Src/main.c ****   * @retval int
  78:Core/Src/main.c ****   */
  79:Core/Src/main.c **** int main(void)
  80:Core/Src/main.c **** {
  81:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE END 1 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  88:Core/Src/main.c ****   HAL_Init();
  89:Core/Src/main.c **** 
ARM GAS  /tmp/ccTBhSsj.s 			page 3


  90:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE END Init */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* Configure the system clock */
  95:Core/Src/main.c ****   SystemClock_Config();
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE END SysInit */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* Initialize all configured peripherals */
 102:Core/Src/main.c ****   MX_GPIO_Init();
 103:Core/Src/main.c ****   MX_I2C1_Init();
 104:Core/Src/main.c ****   MX_USART1_UART_Init();
 105:Core/Src/main.c ****   MX_USART2_UART_Init();
 106:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END 2 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 111:Core/Src/main.c ****   /* add mutexes, ... */
 112:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 115:Core/Src/main.c ****   /* add semaphores, ... */
 116:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 119:Core/Src/main.c ****   /* start timers, add new ones, ... */
 120:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 123:Core/Src/main.c ****   /* add queues, ... */
 124:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Create the thread(s) */
 127:Core/Src/main.c ****   /* definition and creation of defaultTask */
 128:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 129:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   osThreadDef(uart1Task, StartHuart1RxTask, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 132:Core/Src/main.c ****   huart1TaskHandle = osThreadCreate(osThread(uart1Task), NULL);
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   osThreadDef(uart2Task, StartHuart2RxTask, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 135:Core/Src/main.c ****   huart2TaskHandle = osThreadCreate(osThread(uart2Task), NULL);
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 138:Core/Src/main.c ****   /* add threads, ... */
 139:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* Start scheduler */
 142:Core/Src/main.c ****   osKernelStart();
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 145:Core/Src/main.c ****   /* Infinite loop */
 146:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
ARM GAS  /tmp/ccTBhSsj.s 			page 4


 147:Core/Src/main.c ****   while (1)
 148:Core/Src/main.c ****   {
 149:Core/Src/main.c ****     /* USER CODE END WHILE */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 152:Core/Src/main.c ****   }
 153:Core/Src/main.c ****   /* USER CODE END 3 */
 154:Core/Src/main.c **** }
 155:Core/Src/main.c **** 
 156:Core/Src/main.c **** /**
 157:Core/Src/main.c ****   * @brief System Clock Configuration
 158:Core/Src/main.c ****   * @retval None
 159:Core/Src/main.c ****   */
 160:Core/Src/main.c **** void SystemClock_Config(void)
 161:Core/Src/main.c **** {
 162:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 163:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 166:Core/Src/main.c ****   */
 167:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 168:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 169:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 170:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 171:Core/Src/main.c ****   */
 172:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 173:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 174:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 176:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 177:Core/Src/main.c ****   {
 178:Core/Src/main.c ****     Error_Handler();
 179:Core/Src/main.c ****   }
 180:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 181:Core/Src/main.c ****   */
 182:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 183:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 184:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 185:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 186:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 187:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 190:Core/Src/main.c ****   {
 191:Core/Src/main.c ****     Error_Handler();
 192:Core/Src/main.c ****   }
 193:Core/Src/main.c **** }
 194:Core/Src/main.c **** 
 195:Core/Src/main.c **** /**
 196:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 197:Core/Src/main.c ****   * @param None
 198:Core/Src/main.c ****   * @retval None
 199:Core/Src/main.c ****   */
 200:Core/Src/main.c **** static void MX_I2C1_Init(void)
 201:Core/Src/main.c **** {
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
ARM GAS  /tmp/ccTBhSsj.s 			page 5


 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 210:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 211:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 212:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 213:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 214:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 215:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 216:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 217:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 218:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 219:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****     Error_Handler();
 222:Core/Src/main.c ****   }
 223:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c **** }
 228:Core/Src/main.c **** 
 229:Core/Src/main.c **** /**
 230:Core/Src/main.c ****   * @brief USART1 Initialization Function
 231:Core/Src/main.c ****   * @param None
 232:Core/Src/main.c ****   * @retval None
 233:Core/Src/main.c ****   */
 234:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 235:Core/Src/main.c **** {
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 244:Core/Src/main.c ****   huart1.Instance = USART1;
 245:Core/Src/main.c ****   huart1.Init.BaudRate = 9600;
 246:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 247:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 248:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 249:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 250:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 251:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 252:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 253:Core/Src/main.c ****   {
 254:Core/Src/main.c ****     Error_Handler();
 255:Core/Src/main.c ****   }
 256:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** }
ARM GAS  /tmp/ccTBhSsj.s 			page 6


 261:Core/Src/main.c **** 
 262:Core/Src/main.c **** /**
 263:Core/Src/main.c ****   * @brief USART2 Initialization Function
 264:Core/Src/main.c ****   * @param None
 265:Core/Src/main.c ****   * @retval None
 266:Core/Src/main.c ****   */
 267:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 268:Core/Src/main.c **** {
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 277:Core/Src/main.c ****   huart2.Instance = USART2;
 278:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 279:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 280:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 281:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 282:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 283:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 284:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 285:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 286:Core/Src/main.c ****   {
 287:Core/Src/main.c ****     Error_Handler();
 288:Core/Src/main.c ****   }
 289:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** }
 294:Core/Src/main.c **** 
 295:Core/Src/main.c **** /**
 296:Core/Src/main.c ****   * @brief GPIO Initialization Function
 297:Core/Src/main.c ****   * @param None
 298:Core/Src/main.c ****   * @retval None
 299:Core/Src/main.c ****   */
 300:Core/Src/main.c **** static void MX_GPIO_Init(void)
 301:Core/Src/main.c **** {
  27              		.loc 1 301 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 48
 302:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 302 0
  41 0004 0024     		movs	r4, #0
ARM GAS  /tmp/ccTBhSsj.s 			page 7


  42 0006 0394     		str	r4, [sp, #12]
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB4:
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 305:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 305 0
  49 0010 0194     		str	r4, [sp, #4]
  50 0012 134B     		ldr	r3, .L3
  51 0014 1A6B     		ldr	r2, [r3, #48]
  52 0016 42F00102 		orr	r2, r2, #1
  53 001a 1A63     		str	r2, [r3, #48]
  54 001c 1A6B     		ldr	r2, [r3, #48]
  55 001e 02F00102 		and	r2, r2, #1
  56 0022 0192     		str	r2, [sp, #4]
  57 0024 019A     		ldr	r2, [sp, #4]
  58              	.LBE4:
  59              	.LBB5:
 306:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  60              		.loc 1 306 0
  61 0026 0294     		str	r4, [sp, #8]
  62 0028 1A6B     		ldr	r2, [r3, #48]
  63 002a 42F00202 		orr	r2, r2, #2
  64 002e 1A63     		str	r2, [r3, #48]
  65 0030 1B6B     		ldr	r3, [r3, #48]
  66 0032 03F00203 		and	r3, r3, #2
  67 0036 0293     		str	r3, [sp, #8]
  68 0038 029B     		ldr	r3, [sp, #8]
  69              	.LBE5:
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 309:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
  70              		.loc 1 309 0
  71 003a 0A4D     		ldr	r5, .L3+4
  72 003c 2246     		mov	r2, r4
  73 003e 2021     		movs	r1, #32
  74 0040 2846     		mov	r0, r5
  75 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  76              	.LVL0:
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /*Configure GPIO pin : PA5 */
 312:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_5;
  77              		.loc 1 312 0
  78 0046 2023     		movs	r3, #32
  79 0048 0393     		str	r3, [sp, #12]
 313:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  80              		.loc 1 313 0
  81 004a 0123     		movs	r3, #1
  82 004c 0493     		str	r3, [sp, #16]
 314:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  83              		.loc 1 314 0
  84 004e 0594     		str	r4, [sp, #20]
 315:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  85              		.loc 1 315 0
ARM GAS  /tmp/ccTBhSsj.s 			page 8


  86 0050 0694     		str	r4, [sp, #24]
 316:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  87              		.loc 1 316 0
  88 0052 03A9     		add	r1, sp, #12
  89 0054 2846     		mov	r0, r5
  90 0056 FFF7FEFF 		bl	HAL_GPIO_Init
  91              	.LVL1:
 317:Core/Src/main.c **** 
 318:Core/Src/main.c **** }
  92              		.loc 1 318 0
  93 005a 09B0     		add	sp, sp, #36
  94              	.LCFI2:
  95              		.cfi_def_cfa_offset 12
  96              		@ sp needed
  97 005c 30BD     		pop	{r4, r5, pc}
  98              	.L4:
  99 005e 00BF     		.align	2
 100              	.L3:
 101 0060 00380240 		.word	1073887232
 102 0064 00000240 		.word	1073872896
 103              		.cfi_endproc
 104              	.LFE140:
 106              		.section	.text.StartDefaultTask,"ax",%progbits
 107              		.align	1
 108              		.global	StartDefaultTask
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv4-sp-d16
 114              	StartDefaultTask:
 115              	.LFB141:
 319:Core/Src/main.c **** 
 320:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c **** /* USER CODE END 4 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 325:Core/Src/main.c **** /**
 326:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 327:Core/Src/main.c ****   * @param  argument: Not used
 328:Core/Src/main.c ****   * @retval None
 329:Core/Src/main.c ****   */
 330:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 331:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 332:Core/Src/main.c **** { 
 116              		.loc 1 332 0
 117              		.cfi_startproc
 118              		@ Volatile: function does not return.
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL2:
 122 0000 08B5     		push	{r3, lr}
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 3, -8
 126              		.cfi_offset 14, -4
 127              	.LVL3:
ARM GAS  /tmp/ccTBhSsj.s 			page 9


 128              	.L6:
 333:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 334:Core/Src/main.c ****   /* Infinite loop */
 335:Core/Src/main.c ****   for(;;)
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, "Hello World!\r\n", sizeof("Hello World!\r\n"), HAL_MAX_DELAY);
 129              		.loc 1 337 0 discriminator 1
 130 0002 4FF0FF33 		mov	r3, #-1
 131 0006 0F22     		movs	r2, #15
 132 0008 0649     		ldr	r1, .L8
 133 000a 0748     		ldr	r0, .L8+4
 134 000c FFF7FEFF 		bl	HAL_UART_Transmit
 135              	.LVL4:
 338:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // toggle onboard LED
 136              		.loc 1 338 0 discriminator 1
 137 0010 2021     		movs	r1, #32
 138 0012 0648     		ldr	r0, .L8+8
 139 0014 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 140              	.LVL5:
 339:Core/Src/main.c ****     osDelay(1000);
 141              		.loc 1 339 0 discriminator 1
 142 0018 4FF47A70 		mov	r0, #1000
 143 001c FFF7FEFF 		bl	osDelay
 144              	.LVL6:
 145 0020 EFE7     		b	.L6
 146              	.L9:
 147 0022 00BF     		.align	2
 148              	.L8:
 149 0024 00000000 		.word	.LC6
 150 0028 00000000 		.word	huart2
 151 002c 00000240 		.word	1073872896
 152              		.cfi_endproc
 153              	.LFE141:
 155              		.section	.text.StartHuart1RxTask,"ax",%progbits
 156              		.align	1
 157              		.global	StartHuart1RxTask
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu fpv4-sp-d16
 163              	StartHuart1RxTask:
 164              	.LFB142:
 340:Core/Src/main.c ****   }
 341:Core/Src/main.c ****   /* USER CODE END 5 */
 342:Core/Src/main.c **** }
 343:Core/Src/main.c **** 
 344:Core/Src/main.c **** /* USER CODE END Header_StartHuart1RxTask */
 345:Core/Src/main.c **** void StartHuart1RxTask(void const * argument)
 346:Core/Src/main.c **** {
 165              		.loc 1 346 0
 166              		.cfi_startproc
 167              		@ Volatile: function does not return.
 168              		@ args = 0, pretend = 0, frame = 8
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL7:
 171 0000 00B5     		push	{lr}
 172              	.LCFI4:
ARM GAS  /tmp/ccTBhSsj.s 			page 10


 173              		.cfi_def_cfa_offset 4
 174              		.cfi_offset 14, -4
 175 0002 83B0     		sub	sp, sp, #12
 176              	.LCFI5:
 177              		.cfi_def_cfa_offset 16
 178 0004 02E0     		b	.L12
 179              	.LVL8:
 180              	.L11:
 347:Core/Src/main.c ****   uint8_t uart1RxByte;
 348:Core/Src/main.c ****   
 349:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 350:Core/Src/main.c ****   /* Infinite loop */
 351:Core/Src/main.c ****   for(;;)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     memset(&uart1RxByte, 0, sizeof(uart1RxByte));
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****     // echo haurt1 (xbee) rx to haurt2 tx
 356:Core/Src/main.c ****     if(HAL_UART_Receive(&huart1, &uart1RxByte, sizeof(uart1RxByte), 0) == HAL_OK)
 357:Core/Src/main.c ****     {
 358:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, &uart1RxByte, sizeof(uart1RxByte), HAL_MAX_DELAY);
 359:Core/Src/main.c ****     }
 360:Core/Src/main.c ****     osDelay(1);
 181              		.loc 1 360 0
 182 0006 0120     		movs	r0, #1
 183 0008 FFF7FEFF 		bl	osDelay
 184              	.LVL9:
 185              	.L12:
 353:Core/Src/main.c **** 
 186              		.loc 1 353 0
 187 000c 0023     		movs	r3, #0
 188 000e 02A9     		add	r1, sp, #8
 189 0010 01F8013D 		strb	r3, [r1, #-1]!
 356:Core/Src/main.c ****     {
 190              		.loc 1 356 0
 191 0014 0122     		movs	r2, #1
 192 0016 0748     		ldr	r0, .L14
 193 0018 FFF7FEFF 		bl	HAL_UART_Receive
 194              	.LVL10:
 195 001c 0028     		cmp	r0, #0
 196 001e F2D1     		bne	.L11
 358:Core/Src/main.c ****     }
 197              		.loc 1 358 0
 198 0020 4FF0FF33 		mov	r3, #-1
 199 0024 0122     		movs	r2, #1
 200 0026 0DF10701 		add	r1, sp, #7
 201 002a 0348     		ldr	r0, .L14+4
 202 002c FFF7FEFF 		bl	HAL_UART_Transmit
 203              	.LVL11:
 204 0030 E9E7     		b	.L11
 205              	.L15:
 206 0032 00BF     		.align	2
 207              	.L14:
 208 0034 00000000 		.word	huart1
 209 0038 00000000 		.word	huart2
 210              		.cfi_endproc
 211              	.LFE142:
 213              		.section	.text.StartHuart2RxTask,"ax",%progbits
ARM GAS  /tmp/ccTBhSsj.s 			page 11


 214              		.align	1
 215              		.global	StartHuart2RxTask
 216              		.syntax unified
 217              		.thumb
 218              		.thumb_func
 219              		.fpu fpv4-sp-d16
 221              	StartHuart2RxTask:
 222              	.LFB143:
 361:Core/Src/main.c ****   }
 362:Core/Src/main.c ****   /* USER CODE END 5 */
 363:Core/Src/main.c **** }
 364:Core/Src/main.c **** 
 365:Core/Src/main.c **** /* USER CODE END Header_StartHuart2RxTask */
 366:Core/Src/main.c **** void StartHuart2RxTask(void const * argument)
 367:Core/Src/main.c **** {
 223              		.loc 1 367 0
 224              		.cfi_startproc
 225              		@ Volatile: function does not return.
 226              		@ args = 0, pretend = 0, frame = 8
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              	.LVL12:
 229 0000 00B5     		push	{lr}
 230              	.LCFI6:
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 14, -4
 233 0002 83B0     		sub	sp, sp, #12
 234              	.LCFI7:
 235              		.cfi_def_cfa_offset 16
 236 0004 02E0     		b	.L18
 237              	.LVL13:
 238              	.L17:
 368:Core/Src/main.c ****   uint8_t uart2RxByte;
 369:Core/Src/main.c ****   
 370:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 371:Core/Src/main.c ****   /* Infinite loop */
 372:Core/Src/main.c ****   for(;;)
 373:Core/Src/main.c ****   {
 374:Core/Src/main.c ****     memset(&uart2RxByte, 0, sizeof(uart2RxByte));
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****     // echo haurt2 (xbee) rx to haurt1 tx
 377:Core/Src/main.c ****     if(HAL_UART_Receive(&huart2, &uart2RxByte, sizeof(uart2RxByte), 0) == HAL_OK)
 378:Core/Src/main.c ****     {
 379:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, &uart2RxByte, sizeof(uart2RxByte), HAL_MAX_DELAY);
 380:Core/Src/main.c ****     }
 381:Core/Src/main.c ****     osDelay(1);
 239              		.loc 1 381 0
 240 0006 0120     		movs	r0, #1
 241 0008 FFF7FEFF 		bl	osDelay
 242              	.LVL14:
 243              	.L18:
 374:Core/Src/main.c **** 
 244              		.loc 1 374 0
 245 000c 0023     		movs	r3, #0
 246 000e 02A9     		add	r1, sp, #8
 247 0010 01F8013D 		strb	r3, [r1, #-1]!
 377:Core/Src/main.c ****     {
 248              		.loc 1 377 0
ARM GAS  /tmp/ccTBhSsj.s 			page 12


 249 0014 0122     		movs	r2, #1
 250 0016 0748     		ldr	r0, .L20
 251 0018 FFF7FEFF 		bl	HAL_UART_Receive
 252              	.LVL15:
 253 001c 0028     		cmp	r0, #0
 254 001e F2D1     		bne	.L17
 379:Core/Src/main.c ****     }
 255              		.loc 1 379 0
 256 0020 4FF0FF33 		mov	r3, #-1
 257 0024 0122     		movs	r2, #1
 258 0026 0DF10701 		add	r1, sp, #7
 259 002a 0348     		ldr	r0, .L20+4
 260 002c FFF7FEFF 		bl	HAL_UART_Transmit
 261              	.LVL16:
 262 0030 E9E7     		b	.L17
 263              	.L21:
 264 0032 00BF     		.align	2
 265              	.L20:
 266 0034 00000000 		.word	huart2
 267 0038 00000000 		.word	huart1
 268              		.cfi_endproc
 269              	.LFE143:
 271              		.section	.text.Error_Handler,"ax",%progbits
 272              		.align	1
 273              		.global	Error_Handler
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu fpv4-sp-d16
 279              	Error_Handler:
 280              	.LFB144:
 382:Core/Src/main.c ****   }
 383:Core/Src/main.c ****   /* USER CODE END 5 */
 384:Core/Src/main.c **** }
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** /**
 387:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 388:Core/Src/main.c ****   * @retval None
 389:Core/Src/main.c ****   */
 390:Core/Src/main.c **** void Error_Handler(void)
 391:Core/Src/main.c **** {
 281              		.loc 1 391 0
 282              		.cfi_startproc
 283              		@ Volatile: function does not return.
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287              	.LBB6:
 288              	.LBB7:
 289              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
ARM GAS  /tmp/ccTBhSsj.s 			page 13


   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
ARM GAS  /tmp/ccTBhSsj.s 			page 14


  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/ccTBhSsj.s 			page 15


 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 290              		.loc 2 142 0
 291              		.syntax unified
 292              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 293 0000 72B6     		cpsid i
 294              	@ 0 "" 2
 295              		.thumb
 296              		.syntax unified
 297              	.L23:
 298 0002 FEE7     		b	.L23
 299              	.LBE7:
 300              	.LBE6:
 301              		.cfi_endproc
 302              	.LFE144:
 304              		.section	.text.MX_I2C1_Init,"ax",%progbits
 305              		.align	1
 306              		.syntax unified
 307              		.thumb
 308              		.thumb_func
 309              		.fpu fpv4-sp-d16
 311              	MX_I2C1_Init:
 312              	.LFB137:
 201:Core/Src/main.c **** 
 313              		.loc 1 201 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317 0000 08B5     		push	{r3, lr}
 318              	.LCFI8:
 319              		.cfi_def_cfa_offset 8
 320              		.cfi_offset 3, -8
 321              		.cfi_offset 14, -4
 210:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 322              		.loc 1 210 0
 323 0002 0A48     		ldr	r0, .L28
 324 0004 0A4B     		ldr	r3, .L28+4
 325 0006 0360     		str	r3, [r0]
ARM GAS  /tmp/ccTBhSsj.s 			page 16


 211:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 326              		.loc 1 211 0
 327 0008 0A4B     		ldr	r3, .L28+8
 328 000a 4360     		str	r3, [r0, #4]
 212:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 329              		.loc 1 212 0
 330 000c 0023     		movs	r3, #0
 331 000e 8360     		str	r3, [r0, #8]
 213:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 332              		.loc 1 213 0
 333 0010 C360     		str	r3, [r0, #12]
 214:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 334              		.loc 1 214 0
 335 0012 4FF48042 		mov	r2, #16384
 336 0016 0261     		str	r2, [r0, #16]
 215:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 337              		.loc 1 215 0
 338 0018 4361     		str	r3, [r0, #20]
 216:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 339              		.loc 1 216 0
 340 001a 8361     		str	r3, [r0, #24]
 217:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 341              		.loc 1 217 0
 342 001c C361     		str	r3, [r0, #28]
 218:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 343              		.loc 1 218 0
 344 001e 0362     		str	r3, [r0, #32]
 219:Core/Src/main.c ****   {
 345              		.loc 1 219 0
 346 0020 FFF7FEFF 		bl	HAL_I2C_Init
 347              	.LVL17:
 348 0024 00B9     		cbnz	r0, .L27
 349 0026 08BD     		pop	{r3, pc}
 350              	.L27:
 221:Core/Src/main.c ****   }
 351              		.loc 1 221 0
 352 0028 FFF7FEFF 		bl	Error_Handler
 353              	.LVL18:
 354              	.L29:
 355              		.align	2
 356              	.L28:
 357 002c 00000000 		.word	hi2c1
 358 0030 00540040 		.word	1073763328
 359 0034 A0860100 		.word	100000
 360              		.cfi_endproc
 361              	.LFE137:
 363              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 364              		.align	1
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu fpv4-sp-d16
 370              	MX_USART1_UART_Init:
 371              	.LFB138:
 235:Core/Src/main.c **** 
 372              		.loc 1 235 0
 373              		.cfi_startproc
ARM GAS  /tmp/ccTBhSsj.s 			page 17


 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376 0000 08B5     		push	{r3, lr}
 377              	.LCFI9:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 3, -8
 380              		.cfi_offset 14, -4
 244:Core/Src/main.c ****   huart1.Init.BaudRate = 9600;
 381              		.loc 1 244 0
 382 0002 0A48     		ldr	r0, .L34
 383 0004 0A4B     		ldr	r3, .L34+4
 384 0006 0360     		str	r3, [r0]
 245:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 385              		.loc 1 245 0
 386 0008 4FF41653 		mov	r3, #9600
 387 000c 4360     		str	r3, [r0, #4]
 246:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 388              		.loc 1 246 0
 389 000e 0023     		movs	r3, #0
 390 0010 8360     		str	r3, [r0, #8]
 247:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 391              		.loc 1 247 0
 392 0012 C360     		str	r3, [r0, #12]
 248:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 393              		.loc 1 248 0
 394 0014 0361     		str	r3, [r0, #16]
 249:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 395              		.loc 1 249 0
 396 0016 0C22     		movs	r2, #12
 397 0018 4261     		str	r2, [r0, #20]
 250:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 398              		.loc 1 250 0
 399 001a 8361     		str	r3, [r0, #24]
 251:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 400              		.loc 1 251 0
 401 001c C361     		str	r3, [r0, #28]
 252:Core/Src/main.c ****   {
 402              		.loc 1 252 0
 403 001e FFF7FEFF 		bl	HAL_UART_Init
 404              	.LVL19:
 405 0022 00B9     		cbnz	r0, .L33
 406 0024 08BD     		pop	{r3, pc}
 407              	.L33:
 254:Core/Src/main.c ****   }
 408              		.loc 1 254 0
 409 0026 FFF7FEFF 		bl	Error_Handler
 410              	.LVL20:
 411              	.L35:
 412 002a 00BF     		.align	2
 413              	.L34:
 414 002c 00000000 		.word	huart1
 415 0030 00100140 		.word	1073811456
 416              		.cfi_endproc
 417              	.LFE138:
 419              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 420              		.align	1
 421              		.syntax unified
ARM GAS  /tmp/ccTBhSsj.s 			page 18


 422              		.thumb
 423              		.thumb_func
 424              		.fpu fpv4-sp-d16
 426              	MX_USART2_UART_Init:
 427              	.LFB139:
 268:Core/Src/main.c **** 
 428              		.loc 1 268 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432 0000 08B5     		push	{r3, lr}
 433              	.LCFI10:
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 3, -8
 436              		.cfi_offset 14, -4
 277:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 437              		.loc 1 277 0
 438 0002 0A48     		ldr	r0, .L40
 439 0004 0A4B     		ldr	r3, .L40+4
 440 0006 0360     		str	r3, [r0]
 278:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 441              		.loc 1 278 0
 442 0008 4FF41653 		mov	r3, #9600
 443 000c 4360     		str	r3, [r0, #4]
 279:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 444              		.loc 1 279 0
 445 000e 0023     		movs	r3, #0
 446 0010 8360     		str	r3, [r0, #8]
 280:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 447              		.loc 1 280 0
 448 0012 C360     		str	r3, [r0, #12]
 281:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 449              		.loc 1 281 0
 450 0014 0361     		str	r3, [r0, #16]
 282:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 451              		.loc 1 282 0
 452 0016 0C22     		movs	r2, #12
 453 0018 4261     		str	r2, [r0, #20]
 283:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 454              		.loc 1 283 0
 455 001a 8361     		str	r3, [r0, #24]
 284:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 456              		.loc 1 284 0
 457 001c C361     		str	r3, [r0, #28]
 285:Core/Src/main.c ****   {
 458              		.loc 1 285 0
 459 001e FFF7FEFF 		bl	HAL_UART_Init
 460              	.LVL21:
 461 0022 00B9     		cbnz	r0, .L39
 462 0024 08BD     		pop	{r3, pc}
 463              	.L39:
 287:Core/Src/main.c ****   }
 464              		.loc 1 287 0
 465 0026 FFF7FEFF 		bl	Error_Handler
 466              	.LVL22:
 467              	.L41:
 468 002a 00BF     		.align	2
ARM GAS  /tmp/ccTBhSsj.s 			page 19


 469              	.L40:
 470 002c 00000000 		.word	huart2
 471 0030 00440040 		.word	1073759232
 472              		.cfi_endproc
 473              	.LFE139:
 475              		.section	.text.SystemClock_Config,"ax",%progbits
 476              		.align	1
 477              		.global	SystemClock_Config
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 481              		.fpu fpv4-sp-d16
 483              	SystemClock_Config:
 484              	.LFB136:
 161:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 485              		.loc 1 161 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 80
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 00B5     		push	{lr}
 490              	.LCFI11:
 491              		.cfi_def_cfa_offset 4
 492              		.cfi_offset 14, -4
 493 0002 95B0     		sub	sp, sp, #84
 494              	.LCFI12:
 495              		.cfi_def_cfa_offset 88
 162:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 496              		.loc 1 162 0
 497 0004 3422     		movs	r2, #52
 498 0006 0021     		movs	r1, #0
 499 0008 07A8     		add	r0, sp, #28
 500 000a FFF7FEFF 		bl	memset
 501              	.LVL23:
 163:Core/Src/main.c **** 
 502              		.loc 1 163 0
 503 000e 0023     		movs	r3, #0
 504 0010 0293     		str	r3, [sp, #8]
 505 0012 0393     		str	r3, [sp, #12]
 506 0014 0493     		str	r3, [sp, #16]
 507 0016 0593     		str	r3, [sp, #20]
 508 0018 0693     		str	r3, [sp, #24]
 509              	.LBB8:
 167:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 510              		.loc 1 167 0
 511 001a 0093     		str	r3, [sp]
 512 001c 194A     		ldr	r2, .L48
 513 001e 116C     		ldr	r1, [r2, #64]
 514 0020 41F08051 		orr	r1, r1, #268435456
 515 0024 1164     		str	r1, [r2, #64]
 516 0026 126C     		ldr	r2, [r2, #64]
 517 0028 02F08052 		and	r2, r2, #268435456
 518 002c 0092     		str	r2, [sp]
 519 002e 009A     		ldr	r2, [sp]
 520              	.LBE8:
 521              	.LBB9:
 168:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 522              		.loc 1 168 0
ARM GAS  /tmp/ccTBhSsj.s 			page 20


 523 0030 0193     		str	r3, [sp, #4]
 524 0032 1549     		ldr	r1, .L48+4
 525 0034 0A68     		ldr	r2, [r1]
 526 0036 22F44042 		bic	r2, r2, #49152
 527 003a 42F48042 		orr	r2, r2, #16384
 528 003e 0A60     		str	r2, [r1]
 529 0040 0A68     		ldr	r2, [r1]
 530 0042 02F44042 		and	r2, r2, #49152
 531 0046 0192     		str	r2, [sp, #4]
 532 0048 019A     		ldr	r2, [sp, #4]
 533              	.LBE9:
 172:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 534              		.loc 1 172 0
 535 004a 0222     		movs	r2, #2
 536 004c 0792     		str	r2, [sp, #28]
 173:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 537              		.loc 1 173 0
 538 004e 0122     		movs	r2, #1
 539 0050 0A92     		str	r2, [sp, #40]
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 540              		.loc 1 174 0
 541 0052 1022     		movs	r2, #16
 542 0054 0B92     		str	r2, [sp, #44]
 175:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 543              		.loc 1 175 0
 544 0056 0D93     		str	r3, [sp, #52]
 176:Core/Src/main.c ****   {
 545              		.loc 1 176 0
 546 0058 07A8     		add	r0, sp, #28
 547 005a FFF7FEFF 		bl	HAL_RCC_OscConfig
 548              	.LVL24:
 549 005e 68B9     		cbnz	r0, .L46
 182:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 550              		.loc 1 182 0
 551 0060 0F23     		movs	r3, #15
 552 0062 0293     		str	r3, [sp, #8]
 184:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 553              		.loc 1 184 0
 554 0064 0021     		movs	r1, #0
 555 0066 0391     		str	r1, [sp, #12]
 185:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 556              		.loc 1 185 0
 557 0068 0491     		str	r1, [sp, #16]
 186:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 558              		.loc 1 186 0
 559 006a 0591     		str	r1, [sp, #20]
 187:Core/Src/main.c **** 
 560              		.loc 1 187 0
 561 006c 0691     		str	r1, [sp, #24]
 189:Core/Src/main.c ****   {
 562              		.loc 1 189 0
 563 006e 02A8     		add	r0, sp, #8
 564 0070 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 565              	.LVL25:
 566 0074 20B9     		cbnz	r0, .L47
 193:Core/Src/main.c **** 
 567              		.loc 1 193 0
ARM GAS  /tmp/ccTBhSsj.s 			page 21


 568 0076 15B0     		add	sp, sp, #84
 569              	.LCFI13:
 570              		.cfi_remember_state
 571              		.cfi_def_cfa_offset 4
 572              		@ sp needed
 573 0078 5DF804FB 		ldr	pc, [sp], #4
 574              	.L46:
 575              	.LCFI14:
 576              		.cfi_restore_state
 178:Core/Src/main.c ****   }
 577              		.loc 1 178 0
 578 007c FFF7FEFF 		bl	Error_Handler
 579              	.LVL26:
 580              	.L47:
 191:Core/Src/main.c ****   }
 581              		.loc 1 191 0
 582 0080 FFF7FEFF 		bl	Error_Handler
 583              	.LVL27:
 584              	.L49:
 585              		.align	2
 586              	.L48:
 587 0084 00380240 		.word	1073887232
 588 0088 00700040 		.word	1073770496
 589              		.cfi_endproc
 590              	.LFE136:
 592              		.section	.text.main,"ax",%progbits
 593              		.align	1
 594              		.global	main
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu fpv4-sp-d16
 600              	main:
 601              	.LFB135:
  80:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 602              		.loc 1 80 0
 603              		.cfi_startproc
 604              		@ Volatile: function does not return.
 605              		@ args = 0, pretend = 0, frame = 88
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607 0000 00B5     		push	{lr}
 608              	.LCFI15:
 609              		.cfi_def_cfa_offset 4
 610              		.cfi_offset 14, -4
 611 0002 97B0     		sub	sp, sp, #92
 612              	.LCFI16:
 613              		.cfi_def_cfa_offset 96
  88:Core/Src/main.c **** 
 614              		.loc 1 88 0
 615 0004 FFF7FEFF 		bl	HAL_Init
 616              	.LVL28:
  95:Core/Src/main.c **** 
 617              		.loc 1 95 0
 618 0008 FFF7FEFF 		bl	SystemClock_Config
 619              	.LVL29:
 102:Core/Src/main.c ****   MX_I2C1_Init();
 620              		.loc 1 102 0
ARM GAS  /tmp/ccTBhSsj.s 			page 22


 621 000c FFF7FEFF 		bl	MX_GPIO_Init
 622              	.LVL30:
 103:Core/Src/main.c ****   MX_USART1_UART_Init();
 623              		.loc 1 103 0
 624 0010 FFF7FEFF 		bl	MX_I2C1_Init
 625              	.LVL31:
 104:Core/Src/main.c ****   MX_USART2_UART_Init();
 626              		.loc 1 104 0
 627 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
 628              	.LVL32:
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 629              		.loc 1 105 0
 630 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 631              	.LVL33:
 128:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 632              		.loc 1 128 0
 633 001c 174C     		ldr	r4, .L53
 634 001e 0FAD     		add	r5, sp, #60
 635 0020 2646     		mov	r6, r4
 636 0022 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 637 0024 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 638 0026 96E80700 		ldm	r6, {r0, r1, r2}
 639 002a 85E80700 		stm	r5, {r0, r1, r2}
 129:Core/Src/main.c **** 
 640              		.loc 1 129 0
 641 002e 0021     		movs	r1, #0
 642 0030 0FA8     		add	r0, sp, #60
 643 0032 FFF7FEFF 		bl	osThreadCreate
 644              	.LVL34:
 645 0036 124B     		ldr	r3, .L53+4
 646 0038 1860     		str	r0, [r3]
 131:Core/Src/main.c ****   huart1TaskHandle = osThreadCreate(osThread(uart1Task), NULL);
 647              		.loc 1 131 0
 648 003a 08AD     		add	r5, sp, #32
 649 003c 04F11C06 		add	r6, r4, #28
 650 0040 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 651 0042 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 652 0044 96E80700 		ldm	r6, {r0, r1, r2}
 653 0048 85E80700 		stm	r5, {r0, r1, r2}
 132:Core/Src/main.c **** 
 654              		.loc 1 132 0
 655 004c 0021     		movs	r1, #0
 656 004e 08A8     		add	r0, sp, #32
 657 0050 FFF7FEFF 		bl	osThreadCreate
 658              	.LVL35:
 659 0054 0B4B     		ldr	r3, .L53+8
 660 0056 1860     		str	r0, [r3]
 134:Core/Src/main.c ****   huart2TaskHandle = osThreadCreate(osThread(uart2Task), NULL);
 661              		.loc 1 134 0
 662 0058 01AD     		add	r5, sp, #4
 663 005a 3834     		adds	r4, r4, #56
 664 005c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 665 005e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 666 0060 94E80700 		ldm	r4, {r0, r1, r2}
 667 0064 85E80700 		stm	r5, {r0, r1, r2}
 135:Core/Src/main.c **** 
 668              		.loc 1 135 0
ARM GAS  /tmp/ccTBhSsj.s 			page 23


 669 0068 0021     		movs	r1, #0
 670 006a 01A8     		add	r0, sp, #4
 671 006c FFF7FEFF 		bl	osThreadCreate
 672              	.LVL36:
 673 0070 054B     		ldr	r3, .L53+12
 674 0072 1860     		str	r0, [r3]
 142:Core/Src/main.c **** 
 675              		.loc 1 142 0
 676 0074 FFF7FEFF 		bl	osKernelStart
 677              	.LVL37:
 678              	.L51:
 679 0078 FEE7     		b	.L51
 680              	.L54:
 681 007a 00BF     		.align	2
 682              	.L53:
 683 007c 00000000 		.word	.LANCHOR0
 684 0080 00000000 		.word	defaultTaskHandle
 685 0084 00000000 		.word	huart1TaskHandle
 686 0088 00000000 		.word	huart2TaskHandle
 687              		.cfi_endproc
 688              	.LFE135:
 690              		.comm	huart2TaskHandle,4,4
 691              		.comm	huart1TaskHandle,4,4
 692              		.comm	defaultTaskHandle,4,4
 693              		.comm	huart2,68,4
 694              		.comm	huart1,68,4
 695              		.comm	hi2c1,84,4
 696              		.section	.rodata
 697              		.align	2
 698              		.set	.LANCHOR0,. + 0
 699              	.LC7:
 700 0000 18000000 		.word	.LC0
 701 0004 00000000 		.word	StartDefaultTask
 702 0008 0000     		.short	0
 703 000a 0000     		.space	2
 704 000c 00000000 		.word	0
 705 0010 80000000 		.word	128
 706 0014 00000000 		.word	0
 707 0018 00000000 		.word	0
 708              	.LC8:
 709 001c 0C000000 		.word	.LC2
 710 0020 00000000 		.word	StartHuart1RxTask
 711 0024 0300     		.short	3
 712 0026 0000     		.space	2
 713 0028 00000000 		.word	0
 714 002c 80000000 		.word	128
 715 0030 00000000 		.word	0
 716 0034 00000000 		.word	0
 717              	.LC9:
 718 0038 00000000 		.word	.LC4
 719 003c 00000000 		.word	StartHuart2RxTask
 720 0040 0300     		.short	3
 721 0042 0000     		.space	2
 722 0044 00000000 		.word	0
 723 0048 80000000 		.word	128
 724 004c 00000000 		.word	0
 725 0050 00000000 		.word	0
ARM GAS  /tmp/ccTBhSsj.s 			page 24


 726              		.section	.rodata.StartDefaultTask.str1.4,"aMS",%progbits,1
 727              		.align	2
 728              	.LC6:
 729 0000 48656C6C 		.ascii	"Hello World!\015\012\000"
 729      6F20576F 
 729      726C6421 
 729      0D0A00
 730              		.section	.rodata.str1.4,"aMS",%progbits,1
 731              		.align	2
 732              	.LC4:
 733 0000 75617274 		.ascii	"uart2Task\000"
 733      32546173 
 733      6B00
 734 000a 0000     		.space	2
 735              	.LC2:
 736 000c 75617274 		.ascii	"uart1Task\000"
 736      31546173 
 736      6B00
 737 0016 0000     		.space	2
 738              	.LC0:
 739 0018 64656661 		.ascii	"defaultTask\000"
 739      756C7454 
 739      61736B00 
 740              		.text
 741              	.Letext0:
 742              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 743              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 744              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 745              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 746              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 747              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 748              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 749              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 750              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 751              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 752              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 753              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 754              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 755              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 756              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 757              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 758              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 759              		.file 20 "/usr/include/newlib/sys/lock.h"
 760              		.file 21 "/usr/include/newlib/sys/_types.h"
 761              		.file 22 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 762              		.file 23 "/usr/include/newlib/sys/reent.h"
ARM GAS  /tmp/ccTBhSsj.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccTBhSsj.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccTBhSsj.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccTBhSsj.s:101    .text.MX_GPIO_Init:0000000000000060 $d
     /tmp/ccTBhSsj.s:107    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccTBhSsj.s:114    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccTBhSsj.s:149    .text.StartDefaultTask:0000000000000024 $d
                            *COM*:0000000000000044 huart2
     /tmp/ccTBhSsj.s:156    .text.StartHuart1RxTask:0000000000000000 $t
     /tmp/ccTBhSsj.s:163    .text.StartHuart1RxTask:0000000000000000 StartHuart1RxTask
     /tmp/ccTBhSsj.s:208    .text.StartHuart1RxTask:0000000000000034 $d
                            *COM*:0000000000000044 huart1
     /tmp/ccTBhSsj.s:214    .text.StartHuart2RxTask:0000000000000000 $t
     /tmp/ccTBhSsj.s:221    .text.StartHuart2RxTask:0000000000000000 StartHuart2RxTask
     /tmp/ccTBhSsj.s:266    .text.StartHuart2RxTask:0000000000000034 $d
     /tmp/ccTBhSsj.s:272    .text.Error_Handler:0000000000000000 $t
     /tmp/ccTBhSsj.s:279    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccTBhSsj.s:305    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccTBhSsj.s:311    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccTBhSsj.s:357    .text.MX_I2C1_Init:000000000000002c $d
                            *COM*:0000000000000054 hi2c1
     /tmp/ccTBhSsj.s:364    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccTBhSsj.s:370    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccTBhSsj.s:414    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccTBhSsj.s:420    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccTBhSsj.s:426    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccTBhSsj.s:470    .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccTBhSsj.s:476    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccTBhSsj.s:483    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccTBhSsj.s:587    .text.SystemClock_Config:0000000000000084 $d
     /tmp/ccTBhSsj.s:593    .text.main:0000000000000000 $t
     /tmp/ccTBhSsj.s:600    .text.main:0000000000000000 main
     /tmp/ccTBhSsj.s:683    .text.main:000000000000007c $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 huart1TaskHandle
                            *COM*:0000000000000004 huart2TaskHandle
     /tmp/ccTBhSsj.s:697    .rodata:0000000000000000 $d
     /tmp/ccTBhSsj.s:727    .rodata.StartDefaultTask.str1.4:0000000000000000 $d
     /tmp/ccTBhSsj.s:731    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
HAL_GPIO_TogglePin
osDelay
HAL_UART_Receive
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osThreadCreate
osKernelStart
ARM GAS  /tmp/ccTBhSsj.s 			page 26


