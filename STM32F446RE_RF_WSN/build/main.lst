ARM GAS  /tmp/ccjcLQxw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB139:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  /tmp/ccjcLQxw.s 			page 2


  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart2;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** osThreadId defaultTaskHandle;
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  54:Core/Src/main.c **** void SystemClock_Config(void);
  55:Core/Src/main.c **** static void MX_GPIO_Init(void);
  56:Core/Src/main.c **** static void MX_I2C1_Init(void);
  57:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  58:Core/Src/main.c **** void StartDefaultTask(void const * argument);
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END 0 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /**
  70:Core/Src/main.c ****   * @brief  The application entry point.
  71:Core/Src/main.c ****   * @retval int
  72:Core/Src/main.c ****   */
  73:Core/Src/main.c **** int main(void)
  74:Core/Src/main.c **** {
  75:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* USER CODE END 1 */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  82:Core/Src/main.c ****   HAL_Init();
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END Init */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* Configure the system clock */
  89:Core/Src/main.c ****   SystemClock_Config();
ARM GAS  /tmp/ccjcLQxw.s 			page 3


  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END SysInit */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Initialize all configured peripherals */
  96:Core/Src/main.c ****   MX_GPIO_Init();
  97:Core/Src/main.c ****   MX_I2C1_Init();
  98:Core/Src/main.c ****   MX_USART2_UART_Init();
  99:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE END 2 */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 104:Core/Src/main.c ****   /* add mutexes, ... */
 105:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 108:Core/Src/main.c ****   /* add semaphores, ... */
 109:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 112:Core/Src/main.c ****   /* start timers, add new ones, ... */
 113:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 116:Core/Src/main.c ****   /* add queues, ... */
 117:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* Create the thread(s) */
 120:Core/Src/main.c ****   /* definition and creation of defaultTask */
 121:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 122:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 125:Core/Src/main.c ****   /* add threads, ... */
 126:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* Start scheduler */
 129:Core/Src/main.c ****   osKernelStart();
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 132:Core/Src/main.c ****   /* Infinite loop */
 133:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 134:Core/Src/main.c ****   while (1)
 135:Core/Src/main.c ****   {
 136:Core/Src/main.c ****     /* USER CODE END WHILE */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 139:Core/Src/main.c ****   }
 140:Core/Src/main.c ****   /* USER CODE END 3 */
 141:Core/Src/main.c **** }
 142:Core/Src/main.c **** 
 143:Core/Src/main.c **** /**
 144:Core/Src/main.c ****   * @brief System Clock Configuration
 145:Core/Src/main.c ****   * @retval None
 146:Core/Src/main.c ****   */
ARM GAS  /tmp/ccjcLQxw.s 			page 4


 147:Core/Src/main.c **** void SystemClock_Config(void)
 148:Core/Src/main.c **** {
 149:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 150:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 153:Core/Src/main.c ****   */
 154:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 155:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 156:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 157:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 158:Core/Src/main.c ****   */
 159:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 160:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 161:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 162:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 163:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 164:Core/Src/main.c ****   {
 165:Core/Src/main.c ****     Error_Handler();
 166:Core/Src/main.c ****   }
 167:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 168:Core/Src/main.c ****   */
 169:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 170:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 171:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 172:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 173:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 174:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 177:Core/Src/main.c ****   {
 178:Core/Src/main.c ****     Error_Handler();
 179:Core/Src/main.c ****   }
 180:Core/Src/main.c **** }
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** /**
 183:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 184:Core/Src/main.c ****   * @param None
 185:Core/Src/main.c ****   * @retval None
 186:Core/Src/main.c ****   */
 187:Core/Src/main.c **** static void MX_I2C1_Init(void)
 188:Core/Src/main.c **** {
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 197:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 198:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 199:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 200:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 201:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 202:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 203:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
ARM GAS  /tmp/ccjcLQxw.s 			page 5


 204:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 205:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 206:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 207:Core/Src/main.c ****   {
 208:Core/Src/main.c ****     Error_Handler();
 209:Core/Src/main.c ****   }
 210:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c **** }
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** /**
 217:Core/Src/main.c ****   * @brief USART2 Initialization Function
 218:Core/Src/main.c ****   * @param None
 219:Core/Src/main.c ****   * @retval None
 220:Core/Src/main.c ****   */
 221:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 222:Core/Src/main.c **** {
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 231:Core/Src/main.c ****   huart2.Instance = USART2;
 232:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 233:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 234:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 235:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 236:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 237:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 238:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 239:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c ****     Error_Handler();
 242:Core/Src/main.c ****   }
 243:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /**
 250:Core/Src/main.c ****   * @brief GPIO Initialization Function
 251:Core/Src/main.c ****   * @param None
 252:Core/Src/main.c ****   * @retval None
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c **** static void MX_GPIO_Init(void)
 255:Core/Src/main.c **** {
  27              		.loc 1 255 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccjcLQxw.s 			page 6


  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 48
 256:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 256 0
  41 0004 0024     		movs	r4, #0
  42 0006 0394     		str	r4, [sp, #12]
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB4:
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 259:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 259 0
  49 0010 0194     		str	r4, [sp, #4]
  50 0012 134B     		ldr	r3, .L3
  51 0014 1A6B     		ldr	r2, [r3, #48]
  52 0016 42F00102 		orr	r2, r2, #1
  53 001a 1A63     		str	r2, [r3, #48]
  54 001c 1A6B     		ldr	r2, [r3, #48]
  55 001e 02F00102 		and	r2, r2, #1
  56 0022 0192     		str	r2, [sp, #4]
  57 0024 019A     		ldr	r2, [sp, #4]
  58              	.LBE4:
  59              	.LBB5:
 260:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  60              		.loc 1 260 0
  61 0026 0294     		str	r4, [sp, #8]
  62 0028 1A6B     		ldr	r2, [r3, #48]
  63 002a 42F00202 		orr	r2, r2, #2
  64 002e 1A63     		str	r2, [r3, #48]
  65 0030 1B6B     		ldr	r3, [r3, #48]
  66 0032 03F00203 		and	r3, r3, #2
  67 0036 0293     		str	r3, [sp, #8]
  68 0038 029B     		ldr	r3, [sp, #8]
  69              	.LBE5:
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 263:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
  70              		.loc 1 263 0
  71 003a 0A4D     		ldr	r5, .L3+4
  72 003c 2246     		mov	r2, r4
  73 003e 2021     		movs	r1, #32
  74 0040 2846     		mov	r0, r5
  75 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  76              	.LVL0:
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /*Configure GPIO pin : PA5 */
 266:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_5;
  77              		.loc 1 266 0
ARM GAS  /tmp/ccjcLQxw.s 			page 7


  78 0046 2023     		movs	r3, #32
  79 0048 0393     		str	r3, [sp, #12]
 267:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  80              		.loc 1 267 0
  81 004a 0123     		movs	r3, #1
  82 004c 0493     		str	r3, [sp, #16]
 268:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  83              		.loc 1 268 0
  84 004e 0594     		str	r4, [sp, #20]
 269:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  85              		.loc 1 269 0
  86 0050 0694     		str	r4, [sp, #24]
 270:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  87              		.loc 1 270 0
  88 0052 03A9     		add	r1, sp, #12
  89 0054 2846     		mov	r0, r5
  90 0056 FFF7FEFF 		bl	HAL_GPIO_Init
  91              	.LVL1:
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** }
  92              		.loc 1 272 0
  93 005a 09B0     		add	sp, sp, #36
  94              	.LCFI2:
  95              		.cfi_def_cfa_offset 12
  96              		@ sp needed
  97 005c 30BD     		pop	{r4, r5, pc}
  98              	.L4:
  99 005e 00BF     		.align	2
 100              	.L3:
 101 0060 00380240 		.word	1073887232
 102 0064 00000240 		.word	1073872896
 103              		.cfi_endproc
 104              	.LFE139:
 106              		.section	.text.StartDefaultTask,"ax",%progbits
 107              		.align	1
 108              		.global	StartDefaultTask
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv4-sp-d16
 114              	StartDefaultTask:
 115              	.LFB140:
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c **** /* USER CODE END 4 */
 277:Core/Src/main.c **** 
 278:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 279:Core/Src/main.c **** /**
 280:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 281:Core/Src/main.c ****   * @param  argument: Not used
 282:Core/Src/main.c ****   * @retval None
 283:Core/Src/main.c ****   */
 284:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 285:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 286:Core/Src/main.c **** {
 116              		.loc 1 286 0
ARM GAS  /tmp/ccjcLQxw.s 			page 8


 117              		.cfi_startproc
 118              		@ Volatile: function does not return.
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL2:
 122 0000 08B5     		push	{r3, lr}
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 3, -8
 126              		.cfi_offset 14, -4
 127              	.LVL3:
 128              	.L6:
 287:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 288:Core/Src/main.c ****   /* Infinite loop */
 289:Core/Src/main.c ****   for(;;)
 290:Core/Src/main.c ****   {
 291:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // toggle onboard LED
 129              		.loc 1 291 0 discriminator 1
 130 0002 2021     		movs	r1, #32
 131 0004 0748     		ldr	r0, .L8
 132 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 133              	.LVL4:
 292:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, "Hello huart2!", sizeof("Hello huart2!"), HAL_MAX_DELAY);
 134              		.loc 1 292 0 discriminator 1
 135 000a 4FF0FF33 		mov	r3, #-1
 136 000e 0E22     		movs	r2, #14
 137 0010 0549     		ldr	r1, .L8+4
 138 0012 0648     		ldr	r0, .L8+8
 139 0014 FFF7FEFF 		bl	HAL_UART_Transmit
 140              	.LVL5:
 293:Core/Src/main.c ****     osDelay(1000);
 141              		.loc 1 293 0 discriminator 1
 142 0018 4FF47A70 		mov	r0, #1000
 143 001c FFF7FEFF 		bl	osDelay
 144              	.LVL6:
 145 0020 EFE7     		b	.L6
 146              	.L9:
 147 0022 00BF     		.align	2
 148              	.L8:
 149 0024 00000240 		.word	1073872896
 150 0028 00000000 		.word	.LC2
 151 002c 00000000 		.word	huart2
 152              		.cfi_endproc
 153              	.LFE140:
 155              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 156              		.align	1
 157              		.global	HAL_TIM_PeriodElapsedCallback
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu fpv4-sp-d16
 163              	HAL_TIM_PeriodElapsedCallback:
 164              	.LFB141:
 294:Core/Src/main.c ****   }
 295:Core/Src/main.c ****   /* USER CODE END 5 */
 296:Core/Src/main.c **** }
 297:Core/Src/main.c **** 
ARM GAS  /tmp/ccjcLQxw.s 			page 9


 298:Core/Src/main.c ****  /**
 299:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 300:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 301:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 302:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 303:Core/Src/main.c ****   * @param  htim : TIM handle
 304:Core/Src/main.c ****   * @retval None
 305:Core/Src/main.c ****   */
 306:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 307:Core/Src/main.c **** {
 165              		.loc 1 307 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              	.LVL7:
 170 0000 08B5     		push	{r3, lr}
 171              	.LCFI4:
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 3, -8
 174              		.cfi_offset 14, -4
 308:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 311:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 175              		.loc 1 311 0
 176 0002 0268     		ldr	r2, [r0]
 177 0004 034B     		ldr	r3, .L14
 178 0006 9A42     		cmp	r2, r3
 179 0008 00D0     		beq	.L13
 180              	.LVL8:
 181              	.L10:
 182 000a 08BD     		pop	{r3, pc}
 183              	.LVL9:
 184              	.L13:
 312:Core/Src/main.c ****     HAL_IncTick();
 185              		.loc 1 312 0
 186 000c FFF7FEFF 		bl	HAL_IncTick
 187              	.LVL10:
 313:Core/Src/main.c ****   }
 314:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 317:Core/Src/main.c **** }
 188              		.loc 1 317 0
 189 0010 FBE7     		b	.L10
 190              	.L15:
 191 0012 00BF     		.align	2
 192              	.L14:
 193 0014 00000140 		.word	1073807360
 194              		.cfi_endproc
 195              	.LFE141:
 197              		.section	.text.Error_Handler,"ax",%progbits
 198              		.align	1
 199              		.global	Error_Handler
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
ARM GAS  /tmp/ccjcLQxw.s 			page 10


 203              		.fpu fpv4-sp-d16
 205              	Error_Handler:
 206              	.LFB142:
 318:Core/Src/main.c **** 
 319:Core/Src/main.c **** /**
 320:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 321:Core/Src/main.c ****   * @retval None
 322:Core/Src/main.c ****   */
 323:Core/Src/main.c **** void Error_Handler(void)
 324:Core/Src/main.c **** {
 207              		.loc 1 324 0
 208              		.cfi_startproc
 209              		@ Volatile: function does not return.
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213              	.LBB6:
 214              	.LBB7:
 215              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjcLQxw.s 			page 11


  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccjcLQxw.s 			page 12


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 216              		.loc 2 142 0
 217              		.syntax unified
 218              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 219 0000 72B6     		cpsid i
 220              	@ 0 "" 2
 221              		.thumb
 222              		.syntax unified
 223              	.L17:
 224 0002 FEE7     		b	.L17
 225              	.LBE7:
ARM GAS  /tmp/ccjcLQxw.s 			page 13


 226              	.LBE6:
 227              		.cfi_endproc
 228              	.LFE142:
 230              		.section	.text.MX_I2C1_Init,"ax",%progbits
 231              		.align	1
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu fpv4-sp-d16
 237              	MX_I2C1_Init:
 238              	.LFB137:
 188:Core/Src/main.c **** 
 239              		.loc 1 188 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243 0000 08B5     		push	{r3, lr}
 244              	.LCFI5:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 3, -8
 247              		.cfi_offset 14, -4
 197:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 248              		.loc 1 197 0
 249 0002 0A48     		ldr	r0, .L22
 250 0004 0A4B     		ldr	r3, .L22+4
 251 0006 0360     		str	r3, [r0]
 198:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 252              		.loc 1 198 0
 253 0008 0A4B     		ldr	r3, .L22+8
 254 000a 4360     		str	r3, [r0, #4]
 199:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 255              		.loc 1 199 0
 256 000c 0023     		movs	r3, #0
 257 000e 8360     		str	r3, [r0, #8]
 200:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 258              		.loc 1 200 0
 259 0010 C360     		str	r3, [r0, #12]
 201:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 260              		.loc 1 201 0
 261 0012 4FF48042 		mov	r2, #16384
 262 0016 0261     		str	r2, [r0, #16]
 202:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 263              		.loc 1 202 0
 264 0018 4361     		str	r3, [r0, #20]
 203:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 265              		.loc 1 203 0
 266 001a 8361     		str	r3, [r0, #24]
 204:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 267              		.loc 1 204 0
 268 001c C361     		str	r3, [r0, #28]
 205:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 269              		.loc 1 205 0
 270 001e 0362     		str	r3, [r0, #32]
 206:Core/Src/main.c ****   {
 271              		.loc 1 206 0
 272 0020 FFF7FEFF 		bl	HAL_I2C_Init
 273              	.LVL11:
ARM GAS  /tmp/ccjcLQxw.s 			page 14


 274 0024 00B9     		cbnz	r0, .L21
 275 0026 08BD     		pop	{r3, pc}
 276              	.L21:
 208:Core/Src/main.c ****   }
 277              		.loc 1 208 0
 278 0028 FFF7FEFF 		bl	Error_Handler
 279              	.LVL12:
 280              	.L23:
 281              		.align	2
 282              	.L22:
 283 002c 00000000 		.word	hi2c1
 284 0030 00540040 		.word	1073763328
 285 0034 A0860100 		.word	100000
 286              		.cfi_endproc
 287              	.LFE137:
 289              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 290              		.align	1
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	MX_USART2_UART_Init:
 297              	.LFB138:
 222:Core/Src/main.c **** 
 298              		.loc 1 222 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 0000 08B5     		push	{r3, lr}
 303              	.LCFI6:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 3, -8
 306              		.cfi_offset 14, -4
 231:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 307              		.loc 1 231 0
 308 0002 0A48     		ldr	r0, .L28
 309 0004 0A4B     		ldr	r3, .L28+4
 310 0006 0360     		str	r3, [r0]
 232:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 311              		.loc 1 232 0
 312 0008 4FF4E133 		mov	r3, #115200
 313 000c 4360     		str	r3, [r0, #4]
 233:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 314              		.loc 1 233 0
 315 000e 0023     		movs	r3, #0
 316 0010 8360     		str	r3, [r0, #8]
 234:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 317              		.loc 1 234 0
 318 0012 C360     		str	r3, [r0, #12]
 235:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 319              		.loc 1 235 0
 320 0014 0361     		str	r3, [r0, #16]
 236:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 321              		.loc 1 236 0
 322 0016 0C22     		movs	r2, #12
 323 0018 4261     		str	r2, [r0, #20]
 237:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/ccjcLQxw.s 			page 15


 324              		.loc 1 237 0
 325 001a 8361     		str	r3, [r0, #24]
 238:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 326              		.loc 1 238 0
 327 001c C361     		str	r3, [r0, #28]
 239:Core/Src/main.c ****   {
 328              		.loc 1 239 0
 329 001e FFF7FEFF 		bl	HAL_UART_Init
 330              	.LVL13:
 331 0022 00B9     		cbnz	r0, .L27
 332 0024 08BD     		pop	{r3, pc}
 333              	.L27:
 241:Core/Src/main.c ****   }
 334              		.loc 1 241 0
 335 0026 FFF7FEFF 		bl	Error_Handler
 336              	.LVL14:
 337              	.L29:
 338 002a 00BF     		.align	2
 339              	.L28:
 340 002c 00000000 		.word	huart2
 341 0030 00440040 		.word	1073759232
 342              		.cfi_endproc
 343              	.LFE138:
 345              		.section	.text.SystemClock_Config,"ax",%progbits
 346              		.align	1
 347              		.global	SystemClock_Config
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
 353              	SystemClock_Config:
 354              	.LFB136:
 148:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 355              		.loc 1 148 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 80
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359 0000 00B5     		push	{lr}
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 4
 362              		.cfi_offset 14, -4
 363 0002 95B0     		sub	sp, sp, #84
 364              	.LCFI8:
 365              		.cfi_def_cfa_offset 88
 149:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 366              		.loc 1 149 0
 367 0004 3422     		movs	r2, #52
 368 0006 0021     		movs	r1, #0
 369 0008 07A8     		add	r0, sp, #28
 370 000a FFF7FEFF 		bl	memset
 371              	.LVL15:
 150:Core/Src/main.c **** 
 372              		.loc 1 150 0
 373 000e 0023     		movs	r3, #0
 374 0010 0293     		str	r3, [sp, #8]
 375 0012 0393     		str	r3, [sp, #12]
 376 0014 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/ccjcLQxw.s 			page 16


 377 0016 0593     		str	r3, [sp, #20]
 378 0018 0693     		str	r3, [sp, #24]
 379              	.LBB8:
 154:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 380              		.loc 1 154 0
 381 001a 0093     		str	r3, [sp]
 382 001c 194A     		ldr	r2, .L36
 383 001e 116C     		ldr	r1, [r2, #64]
 384 0020 41F08051 		orr	r1, r1, #268435456
 385 0024 1164     		str	r1, [r2, #64]
 386 0026 126C     		ldr	r2, [r2, #64]
 387 0028 02F08052 		and	r2, r2, #268435456
 388 002c 0092     		str	r2, [sp]
 389 002e 009A     		ldr	r2, [sp]
 390              	.LBE8:
 391              	.LBB9:
 155:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 392              		.loc 1 155 0
 393 0030 0193     		str	r3, [sp, #4]
 394 0032 1549     		ldr	r1, .L36+4
 395 0034 0A68     		ldr	r2, [r1]
 396 0036 22F44042 		bic	r2, r2, #49152
 397 003a 42F48042 		orr	r2, r2, #16384
 398 003e 0A60     		str	r2, [r1]
 399 0040 0A68     		ldr	r2, [r1]
 400 0042 02F44042 		and	r2, r2, #49152
 401 0046 0192     		str	r2, [sp, #4]
 402 0048 019A     		ldr	r2, [sp, #4]
 403              	.LBE9:
 159:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 404              		.loc 1 159 0
 405 004a 0222     		movs	r2, #2
 406 004c 0792     		str	r2, [sp, #28]
 160:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 407              		.loc 1 160 0
 408 004e 0122     		movs	r2, #1
 409 0050 0A92     		str	r2, [sp, #40]
 161:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 410              		.loc 1 161 0
 411 0052 1022     		movs	r2, #16
 412 0054 0B92     		str	r2, [sp, #44]
 162:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 413              		.loc 1 162 0
 414 0056 0D93     		str	r3, [sp, #52]
 163:Core/Src/main.c ****   {
 415              		.loc 1 163 0
 416 0058 07A8     		add	r0, sp, #28
 417 005a FFF7FEFF 		bl	HAL_RCC_OscConfig
 418              	.LVL16:
 419 005e 68B9     		cbnz	r0, .L34
 169:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 420              		.loc 1 169 0
 421 0060 0F23     		movs	r3, #15
 422 0062 0293     		str	r3, [sp, #8]
 171:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 423              		.loc 1 171 0
 424 0064 0021     		movs	r1, #0
ARM GAS  /tmp/ccjcLQxw.s 			page 17


 425 0066 0391     		str	r1, [sp, #12]
 172:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 426              		.loc 1 172 0
 427 0068 0491     		str	r1, [sp, #16]
 173:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 428              		.loc 1 173 0
 429 006a 0591     		str	r1, [sp, #20]
 174:Core/Src/main.c **** 
 430              		.loc 1 174 0
 431 006c 0691     		str	r1, [sp, #24]
 176:Core/Src/main.c ****   {
 432              		.loc 1 176 0
 433 006e 02A8     		add	r0, sp, #8
 434 0070 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 435              	.LVL17:
 436 0074 20B9     		cbnz	r0, .L35
 180:Core/Src/main.c **** 
 437              		.loc 1 180 0
 438 0076 15B0     		add	sp, sp, #84
 439              	.LCFI9:
 440              		.cfi_remember_state
 441              		.cfi_def_cfa_offset 4
 442              		@ sp needed
 443 0078 5DF804FB 		ldr	pc, [sp], #4
 444              	.L34:
 445              	.LCFI10:
 446              		.cfi_restore_state
 165:Core/Src/main.c ****   }
 447              		.loc 1 165 0
 448 007c FFF7FEFF 		bl	Error_Handler
 449              	.LVL18:
 450              	.L35:
 178:Core/Src/main.c ****   }
 451              		.loc 1 178 0
 452 0080 FFF7FEFF 		bl	Error_Handler
 453              	.LVL19:
 454              	.L37:
 455              		.align	2
 456              	.L36:
 457 0084 00380240 		.word	1073887232
 458 0088 00700040 		.word	1073770496
 459              		.cfi_endproc
 460              	.LFE136:
 462              		.section	.text.main,"ax",%progbits
 463              		.align	1
 464              		.global	main
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
 470              	main:
 471              	.LFB135:
  74:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 472              		.loc 1 74 0
 473              		.cfi_startproc
 474              		@ Volatile: function does not return.
 475              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/ccjcLQxw.s 			page 18


 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477 0000 00B5     		push	{lr}
 478              	.LCFI11:
 479              		.cfi_def_cfa_offset 4
 480              		.cfi_offset 14, -4
 481 0002 89B0     		sub	sp, sp, #36
 482              	.LCFI12:
 483              		.cfi_def_cfa_offset 40
  82:Core/Src/main.c **** 
 484              		.loc 1 82 0
 485 0004 FFF7FEFF 		bl	HAL_Init
 486              	.LVL20:
  89:Core/Src/main.c **** 
 487              		.loc 1 89 0
 488 0008 FFF7FEFF 		bl	SystemClock_Config
 489              	.LVL21:
  96:Core/Src/main.c ****   MX_I2C1_Init();
 490              		.loc 1 96 0
 491 000c FFF7FEFF 		bl	MX_GPIO_Init
 492              	.LVL22:
  97:Core/Src/main.c ****   MX_USART2_UART_Init();
 493              		.loc 1 97 0
 494 0010 FFF7FEFF 		bl	MX_I2C1_Init
 495              	.LVL23:
  98:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 496              		.loc 1 98 0
 497 0014 FFF7FEFF 		bl	MX_USART2_UART_Init
 498              	.LVL24:
 121:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 499              		.loc 1 121 0
 500 0018 01AC     		add	r4, sp, #4
 501 001a 084D     		ldr	r5, .L41
 502 001c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 503 001e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 504 0020 95E80700 		ldm	r5, {r0, r1, r2}
 505 0024 84E80700 		stm	r4, {r0, r1, r2}
 122:Core/Src/main.c **** 
 506              		.loc 1 122 0
 507 0028 0021     		movs	r1, #0
 508 002a 01A8     		add	r0, sp, #4
 509 002c FFF7FEFF 		bl	osThreadCreate
 510              	.LVL25:
 511 0030 034B     		ldr	r3, .L41+4
 512 0032 1860     		str	r0, [r3]
 129:Core/Src/main.c **** 
 513              		.loc 1 129 0
 514 0034 FFF7FEFF 		bl	osKernelStart
 515              	.LVL26:
 516              	.L39:
 517 0038 FEE7     		b	.L39
 518              	.L42:
 519 003a 00BF     		.align	2
 520              	.L41:
 521 003c 00000000 		.word	.LANCHOR0
 522 0040 00000000 		.word	defaultTaskHandle
 523              		.cfi_endproc
 524              	.LFE135:
ARM GAS  /tmp/ccjcLQxw.s 			page 19


 526              		.comm	defaultTaskHandle,4,4
 527              		.comm	huart2,68,4
 528              		.comm	hi2c1,84,4
 529              		.section	.rodata
 530              		.align	2
 531              		.set	.LANCHOR0,. + 0
 532              	.LC3:
 533 0000 00000000 		.word	.LC0
 534 0004 00000000 		.word	StartDefaultTask
 535 0008 0000     		.short	0
 536 000a 0000     		.space	2
 537 000c 00000000 		.word	0
 538 0010 00040000 		.word	1024
 539 0014 00000000 		.word	0
 540 0018 00000000 		.word	0
 541              		.section	.rodata.StartDefaultTask.str1.4,"aMS",%progbits,1
 542              		.align	2
 543              	.LC2:
 544 0000 48656C6C 		.ascii	"Hello huart2!\000"
 544      6F206875 
 544      61727432 
 544      2100
 545              		.section	.rodata.str1.4,"aMS",%progbits,1
 546              		.align	2
 547              	.LC0:
 548 0000 64656661 		.ascii	"defaultTask\000"
 548      756C7454 
 548      61736B00 
 549              		.text
 550              	.Letext0:
 551              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 552              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 553              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 554              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 555              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 556              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 557              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 558              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 559              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 560              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 561              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 562              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 563              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 564              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 565              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 566              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 567              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 568              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccjcLQxw.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccjcLQxw.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccjcLQxw.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccjcLQxw.s:101    .text.MX_GPIO_Init:0000000000000060 $d
     /tmp/ccjcLQxw.s:107    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccjcLQxw.s:114    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccjcLQxw.s:149    .text.StartDefaultTask:0000000000000024 $d
                            *COM*:0000000000000044 huart2
     /tmp/ccjcLQxw.s:156    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccjcLQxw.s:163    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccjcLQxw.s:193    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccjcLQxw.s:198    .text.Error_Handler:0000000000000000 $t
     /tmp/ccjcLQxw.s:205    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccjcLQxw.s:231    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccjcLQxw.s:237    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccjcLQxw.s:283    .text.MX_I2C1_Init:000000000000002c $d
                            *COM*:0000000000000054 hi2c1
     /tmp/ccjcLQxw.s:290    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccjcLQxw.s:296    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccjcLQxw.s:340    .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccjcLQxw.s:346    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccjcLQxw.s:353    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccjcLQxw.s:457    .text.SystemClock_Config:0000000000000084 $d
     /tmp/ccjcLQxw.s:463    .text.main:0000000000000000 $t
     /tmp/ccjcLQxw.s:470    .text.main:0000000000000000 main
     /tmp/ccjcLQxw.s:521    .text.main:000000000000003c $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/ccjcLQxw.s:530    .rodata:0000000000000000 $d
     /tmp/ccjcLQxw.s:542    .rodata.StartDefaultTask.str1.4:0000000000000000 $d
     /tmp/ccjcLQxw.s:546    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GPIO_TogglePin
HAL_UART_Transmit
osDelay
HAL_IncTick
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osThreadCreate
osKernelStart
